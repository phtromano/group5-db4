from machine import Pin,ADC,DAC
from fanCooler import fanCooler
from coolerpump import Pump  
from PID import PID
from oled import OLED
import utime
import time


from math import log

adc_V_lookup = [0.01235294, 0.03705883, 0.04014706, 0.0432353, 0.04632353, 0.04941177, 0.0525, 0.05558824, 0.05867648, 0.06176471, 0.06485295, 0.06794118, 0.07102942, 0.07411765, 0.0782353, 0.08235294, 0.08647059, 0.08955883, 0.09264707, 0.0957353, 0.09882354, 0.1019118, 0.105, 0.1080882, 0.1111765, 0.1142647, 0.117353, 0.1204412, 0.1235294, 0.1266177, 0.1297059, 0.1327941, 0.1358824, 0.14, 0.1441177, 0.1482353, 0.1513235, 0.1544118, 0.1575, 0.1605882, 0.1636765, 0.1667647, 0.1698529, 0.1729412, 0.1760294, 0.1791177, 0.1822059, 0.1852941, 0.1914706, 0.1976471, 0.2007353, 0.2038235, 0.2069118, 0.21, 0.2130883, 0.2161765, 0.2192647, 0.222353, 0.2254412, 0.2285294, 0.2316177, 0.2347059, 0.2377941, 0.2408824, 0.2439706, 0.2470588, 0.2501471, 0.2532353, 0.2563236, 0.2594118, 0.2625, 0.2655883, 0.2686765, 0.2717647, 0.2758824, 0.28, 0.2841177, 0.2872059, 0.2902942, 0.2933824, 0.2964706, 0.2995588, 0.3026471, 0.3057353, 0.3088235, 0.3119118, 0.315, 0.3180882, 0.3211765, 0.3242647, 0.327353, 0.3304412, 0.3335294, 0.3366177, 0.3397059, 0.3427941, 0.3458824, 0.3489706, 0.3520588, 0.3551471, 0.3582353, 0.362353, 0.3664706, 0.3705883, 0.3747059, 0.3788235, 0.3829412, 0.3870588, 0.3911765, 0.3952941, 0.3994118, 0.4035295, 0.4076471, 0.4107353, 0.4138236, 0.4169118, 0.42, 0.4224706, 0.4249412, 0.4274117, 0.4298823, 0.432353, 0.4364706, 0.4405883, 0.4447059, 0.4477942, 0.4508824, 0.4539706, 0.4570589, 0.4601471, 0.4632353, 0.4663236, 0.4694118, 0.4718824, 0.474353, 0.4768235, 0.4792941, 0.4817647, 0.4858823, 0.4900001, 0.4941177, 0.4972059, 0.5002942, 0.5033824, 0.5064706, 0.5095589, 0.5126471, 0.5157353, 0.5188236, 0.5212941, 0.5237647, 0.5262353, 0.5287059, 0.5311765, 0.5352941, 0.5394118, 0.5435295, 0.547647, 0.5517647, 0.5558824, 0.5589706, 0.5620589, 0.5651471, 0.5682353, 0.5713236, 0.5744118, 0.5775001, 0.5805883, 0.5847059, 0.5888236, 0.5929412, 0.5960294, 0.5991177, 0.6022058, 0.6052941, 0.6094118, 0.6135294, 0.6176471, 0.6207353, 0.6238235, 0.6269117, 0.63, 0.6330882, 0.6361765, 0.6392647, 0.642353, 0.6454412, 0.6485294, 0.6516176, 0.6547059, 0.6577941, 0.6608824, 0.6639706, 0.6670588, 0.670147, 0.6732353, 0.6763235, 0.6794118, 0.6825, 0.6855883, 0.6886765, 0.6917647, 0.6958824, 0.7, 0.7041177, 0.7072059, 0.7102942, 0.7133823, 0.7164706, 0.7195588, 0.7226471, 0.7257353, 0.7288236, 0.7329412, 0.7370589, 0.7411765, 0.7436471, 0.7461177, 0.7485883, 0.7510588, 0.7535295, 0.7566176, 0.7597059, 0.7627941, 0.7658824, 0.7689706, 0.7720589, 0.7751471, 0.7782353, 0.7807059, 0.7831765, 0.785647, 0.7881176, 0.7905883, 0.7936765, 0.7967648, 0.7998529, 0.8029412, 0.8070589, 0.8111765, 0.8152942, 0.8177647, 0.8202353, 0.8227058, 0.8251765, 0.8276471, 0.8317648, 0.8358824, 0.8400001, 0.8430882, 0.8461765, 0.8492647, 0.852353, 0.8544118, 0.8564707, 0.8585295, 0.8605883, 0.8626472, 0.8647059, 0.8677941, 0.8708824, 0.8739706, 0.8770589, 0.8801471, 0.8832354, 0.8863235, 0.8894118, 0.8925, 0.8955883, 0.8986765, 0.9017648, 0.904853, 0.9079412, 0.9110294, 0.9141177, 0.9182354, 0.9223529, 0.9264707, 0.9295588, 0.9326471, 0.9357353, 0.9388236, 0.9419118, 0.9450001, 0.9480883, 0.9511765, 0.9542647, 0.957353, 0.9604412, 0.9635295, 0.9666177, 0.969706, 0.9727942, 0.9758824, 0.9800001, 0.9841176, 0.9882354, 0.9913236, 0.9944118, 0.9975, 1.000588, 1.004706, 1.008824, 1.012941, 1.016029, 1.019118, 1.022206, 1.025294, 1.028382, 1.031471, 1.034559, 1.037647, 1.040735, 1.043824, 1.046912, 1.05, 1.052471, 1.054941, 1.057412, 1.059882, 1.062353, 1.066471, 1.070588, 1.074706, 1.078824, 1.082941, 1.087059, 1.089529, 1.092, 1.094471, 1.096941, 1.099412, 1.1025, 1.105588, 1.108677, 1.111765, 1.114853, 1.117941, 1.121029, 1.124118, 1.128235, 1.132353, 1.136471, 1.139559, 1.142647, 1.145735, 1.148824, 1.151912, 1.155, 1.158088, 1.161177, 1.163647, 1.166118, 1.168588, 1.171059, 1.17353, 1.185882, 1.188971, 1.192059, 1.195147, 1.198235, 1.200706, 1.203176, 1.205647, 1.208118, 1.210588, 1.214706, 1.218824, 1.222941, 1.226029, 1.229118, 1.232206, 1.235294, 1.238382, 1.241471, 1.244559, 1.247647, 1.250735, 1.253824, 1.256912, 1.26, 1.263088, 1.266176, 1.269265, 1.272353, 1.275441, 1.278529, 1.281618, 1.284706, 1.287794, 1.290882, 1.293971, 1.297059, 1.300147, 1.303235, 1.306324, 1.309412, 1.3125, 1.315588, 1.318676, 1.321765, 1.324235, 1.326706, 1.329177, 1.331647, 1.334118, 1.340294, 1.346471, 1.348941, 1.351412, 1.353882, 1.356353, 1.358824, 1.362941, 1.367059, 1.371176, 1.375294, 1.379412, 1.383529, 1.386618, 1.389706, 1.392794, 1.395882, 1.398971, 1.402059, 1.405147, 1.408235, 1.410706, 1.413177, 1.415647, 1.418118, 1.420588, 1.424706, 1.428824, 1.432941, 1.436029, 1.439118, 1.442206, 1.445294, 1.449412, 1.453529, 1.457647, 1.460118, 1.462588, 1.465059, 1.46753, 1.47, 1.473088, 1.476177, 1.479265, 1.482353, 1.488529, 1.494706, 1.497177, 1.499647, 1.502118, 1.504588, 1.507059, 1.510147, 1.513235, 1.516324, 1.519412, 1.52353, 1.527647, 1.531765, 1.534853, 1.537941, 1.541029, 1.544118, 1.546588, 1.549059, 1.551529, 1.554, 1.568824, 1.560588, 1.564706, 1.581177, 1.576235, 1.583647, 1.591059, 1.598471, 1.605882, 1.608971, 1.612059, 1.615147, 1.618235, 1.621324, 1.624412, 1.6275, 1.630588, 1.634706, 1.638824, 1.642941, 1.646029, 1.649118, 1.652206, 1.655294, 1.659412, 1.663529, 1.667647, 1.669706, 1.671765, 1.673824, 1.675882, 1.677941, 1.68, 1.684118, 1.688235, 1.692353, 1.695441, 1.698529, 1.701618, 1.704706, 1.707176, 1.709647, 1.712118, 1.714588, 1.717059, 1.720147, 1.723235, 1.726324, 1.729412, 1.7325, 1.735588, 1.738677, 1.741765, 1.745882, 1.75, 1.754118, 1.757206, 1.760294, 1.763382, 1.766471, 1.770588, 1.774706, 1.778824, 1.781912, 1.785, 1.788088, 1.791177, 1.795294, 1.799412, 1.80353, 1.806, 1.808471, 1.810941, 1.813412, 1.815882, 1.82, 1.824118, 1.828235, 1.830294, 1.832353, 1.834412, 1.836471, 1.838529, 1.840588, 1.846765, 1.852941, 1.85603, 1.859118, 1.862206, 1.865294, 1.871471, 1.877647, 1.879706, 1.881765, 1.883824, 1.885882, 1.887941, 1.89, 1.893088, 1.896177, 1.899265, 1.902353, 1.905441, 1.908529, 1.911618, 1.914706, 1.918823, 1.922941, 1.927059, 1.931176, 1.935294, 1.939412, 1.9425, 1.945588, 1.948677, 1.951765, 1.954853, 1.957941, 1.96103, 1.964118, 1.970294, 1.976471, 1.980588, 1.984706, 1.988824, 1.990882, 1.992941, 1.995, 1.997059, 1.999118, 2.001177, 2.005294, 2.009412, 2.01353, 2.017647, 2.021765, 2.025882, 2.028971, 2.032059, 2.035147, 2.038235, 2.041324, 2.044412, 2.0475, 2.050588, 2.053677, 2.056765, 2.059853, 2.062941, 2.06603, 2.069118, 2.072206, 2.075294, 2.079412, 2.083529, 2.087647, 2.090735, 2.093824, 2.096912, 2.1, 2.103088, 2.106177, 2.109265, 2.112353, 2.114824, 2.117294, 2.119765, 2.122235, 2.124706, 2.127794, 2.130883, 2.133971, 2.137059, 2.139529, 2.142, 2.144471, 2.146941, 2.149412, 2.153529, 2.157647, 2.161765, 2.165882, 2.17, 2.174118, 2.177206, 2.180294, 2.183383, 2.186471, 2.189559, 2.192647, 2.195735, 2.198824, 2.201912, 2.205, 2.208088, 2.211177, 2.215294, 2.219412, 2.22353, 2.226, 2.228471, 2.230941, 2.233412, 2.235883, 2.24, 2.244118, 2.248235, 2.251324, 2.254412, 2.2575, 2.260588, 2.264706, 2.268824, 2.272941, 2.27603, 2.279118, 2.282206, 2.285294, 2.287765, 2.290235, 2.292706, 2.295177, 2.297647, 2.300735, 2.303824, 2.306912, 2.31, 2.313088, 2.316177, 2.319265, 2.322353, 2.325441, 2.32853, 2.331618, 2.334706, 2.337794, 2.340883, 2.343971, 2.347059, 2.350147, 2.353235, 2.356324, 2.359412, 2.361882, 2.364353, 2.366824, 2.369294, 2.371765, 2.374853, 2.377941, 2.381029, 2.384118, 2.387206, 2.390294, 2.393382, 2.396471, 2.399559, 2.402647, 2.405735, 2.408823, 2.411912, 2.415, 2.418088, 2.421176, 2.424265, 2.427353, 2.430441, 2.433529, 2.436618, 2.439706, 2.442794, 2.445882, 2.448971, 2.452059, 2.455147, 2.458235, 2.461323, 2.464412, 2.4675, 2.470588, 2.473676, 2.476765, 2.479853, 2.482941, 2.486029, 2.489118, 2.492206, 2.495294, 2.498382, 2.501471, 2.504559, 2.507647, 2.509706, 2.511765, 2.513824, 2.515882, 2.517941, 2.52, 2.524118, 2.528235, 2.532353, 2.534824, 2.537294, 2.539765, 2.542235, 2.544706, 2.547794, 2.550882, 2.553971, 2.557059, 2.563235, 2.569412, 2.5725, 2.575588, 2.578676, 2.581765, 2.583824, 2.585882, 2.587941, 2.59, 2.592059, 2.594118, 2.600294, 2.606471, 2.60853, 2.610588, 2.612647, 2.614706, 2.616765, 2.618824, 2.622941, 2.627059, 2.631176, 2.633647, 2.636118, 2.638588, 2.641059, 2.643529, 2.646, 2.648471, 2.650941, 2.653412, 2.655882, 2.658971, 2.662059, 2.665147, 2.668235, 2.672353, 2.676471, 2.680588, 2.683059, 2.685529, 2.688, 2.690471, 2.692941, 2.696029, 2.699118, 2.702206, 2.705294, 2.708382, 2.711471, 2.714559, 2.717647, 2.720735, 2.723824, 2.726912, 2.73, 2.732471, 2.734941, 2.737412, 2.739882, 2.742353, 2.744824, 2.747294, 2.749765, 2.752235, 2.754706, 2.760882, 2.767059, 2.770147, 2.773235, 2.776324, 2.779412, 2.781882, 2.784353, 2.786824, 2.789294, 2.791765, 2.795882, 2.8, 2.804118, 2.806588, 2.809059, 2.81153, 2.814, 2.816471, 2.818941, 2.821412, 2.823883, 2.826353, 2.828824, 2.831294, 2.833765, 2.836236, 2.838706, 2.841177, 2.843647, 2.846118, 2.848588, 2.851059, 2.853529, 2.856618, 2.859706, 2.862794, 2.865882, 2.868353, 2.870824, 2.873294, 2.875765, 2.878235, 2.88, 2.881765, 2.883529, 2.885294, 2.887059, 2.888824, 2.890588, 2.893059, 2.89553, 2.898, 2.900471, 2.902941, 2.90603, 2.909118, 2.912206, 2.915294, 2.917353, 2.919412, 2.921471, 2.92353, 2.925588, 2.927647, 2.929706, 2.931765, 2.933824, 2.935883, 2.937941, 2.94, 2.942471, 2.944941, 2.947412, 2.949883, 2.952353, 2.956471, 2.960588, 2.964706, 2.966765, 2.968824, 2.970882, 2.972941, 2.975, 2.977059, 2.979529, 2.982, 2.984471, 2.986941, 2.989412, 2.991177, 2.992941, 2.994706, 2.996471, 2.998235, 3.0, 3.001765, 3.004235, 3.006706, 3.009177, 3.011647, 3.014118, 3.016177, 3.018235, 3.020294, 3.022353, 3.024412, 3.026471, 3.02853, 3.030588, 3.032647, 3.034706, 3.036765, 3.038824, 3.040368, 3.041912, 3.043456, 3.045, 3.046544, 3.048088, 3.049633, 3.051177, 3.054265, 3.057353, 3.060441, 3.063529, 3.065294, 3.067059, 3.068824, 3.070588, 3.072353, 3.074118, 3.075882, 3.077941, 3.08, 3.082059, 3.084118, 3.086176, 3.088235, 3.08978, 3.091324, 3.092868, 3.094412, 3.095956, 3.0975, 3.099044, 3.100588, 3.103059, 3.10553, 3.108, 3.110471, 3.112941, 3.114486, 3.11603, 3.117574, 3.119118, 3.120662, 3.122206, 3.12375, 3.125294, 3.127353, 3.129412, 3.131471, 3.13353, 3.135588, 3.137647, 3.139412, 3.141177, 3.142941, 3.144706, 3.146471, 3.148236, 3.15, 3.15]
NOM_RES = 10000
SER_RES = 9820
TEMP_NOM = 25
NUM_SAMPLES = 25
THERM_B_COEFF = 3950
ADC_MAX = 1023
ADC_Vmax = 3.15

class TempSensor:
    def __init__(self, pinNoTemp = 27):
        self.adc = ADC(Pin(pinNoTemp))
        self.adc.atten(ADC.ATTN_11DB)
        self.adc.width(ADC.WIDTH_10BIT)
        
    def read_temp(self):
        """
            Method to measure the temperature from the thermistor.
            The returned result is averaged over 25 measurements.
        """
        raw_read = []
        # Collect NUM_SAMPLES
        for i in range(1, NUM_SAMPLES+1):
            raw_read.append(self.adc.read())

        # Average of the NUM_SAMPLES and look it up in the table after linearization
        raw_average = sum(raw_read)/NUM_SAMPLES
        #print('raw_avg = ' + str(raw_average))
        #print('V_measured = ' + str(adc_V_lookup[round(raw_average)]))

        # Convert the voltage to resistance
        raw_average = ADC_MAX * adc_V_lookup[round(raw_average)]/ADC_Vmax
        # print(raw_average)
        # print(len(adc_V_lookup))
        resistance = (SER_RES * raw_average) / (ADC_MAX - raw_average)
        # print('Thermistor resistance: {} ohms'.format(resistance))

        # Convert resistance to temperature
        steinhart  = -log(resistance / NOM_RES) / THERM_B_COEFF
        steinhart += 1.0 / (TEMP_NOM + 273.15)
        steinhart  = (1.0 / steinhart) - 273.15
        print('Temperature: {}°C'.format(steinhart))
        return steinhart

#System components
cooler = fanCooler(33, 15)              
coolerpump = Pump(14, 32, 1000)
oledscreen = OLED(22,23)
temp_sensor = TempSensor()  
target_temp = 17.5
pid = PID(temp_sensor.read_temp(), target_temp)

pid.setP(0.8)   
pid.setI(0.03)
pid.setD(0.2)

total_seconds = 300*60               
interval = 3                       

filename = "pid_cooling_test.csv"
with open(filename, "w") as f:
    f.write("time_s,temperature_C, u\n")  

print("Starting cooling test.")

t0 = time.time()
for t in range(total_seconds):
    temps = []
    for _ in range(3):
        temps.append(temp_sensor.read_temp())
        utime.sleep(0.1)  
    temp = sum(temps) / len(temps)
    elapsed = int(time.time() - t0)
    
    u = pid.PID_values(temp)
    if u > 0:
        u=pid.PID_values(temp)
    else:
        u=0
    

    if u>2:
        cooler.coolerOn()
        cooler.powerHigh()
        coolerpump.setDirection(1)
        coolerpump.setSpeed(int(100*u))
        print("Cooler full power")
    elif u<2 and u>0:
        cooler.coolerOn()
        cooler.powerLow()
        coolerpump.setDirection(1)
        coolerpump.setSpeed(1)
        print("Cooler low power and pump lower frequency")
    elif u==0:
        cooler.coolerOff()
        coolerpump.setDirection(0)
        print("Cooler off")
        
    
        print("Cooler off")
    with open(filename, "a") as f:
        f.write("{},{},{}\n".format(elapsed, temp, u))
    print("t = {}s, T = {:.2f}°C, u={}".format(elapsed, temp, u))
    oledscreen.display_PID_controls(temp)
    utime.sleep(interval)

cooler.coolerOff()  
coolerpump.setDirection(0)
print("Cooling test complete.")

